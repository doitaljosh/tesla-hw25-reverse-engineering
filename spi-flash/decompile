#!/bin/bash

# Flash size = 64MiB
FLASH_SIZE=67108864

# Nvidia BCH header size
# See https://docs.nvidia.com/drive/drive_os_5.1.6.1L/nvvib_docs/index.html#page/DRIVE_OS_Linux_SDK_Development_Guide/Bootloader/bootloader_bootflow.html
BCH_SIZE_FW="0x190"
BCH_SIZE_LNX="0x200"
BOOTIMG_HDR_SIZE="0x200"

# Output directory structure
OUT_DIR="${PWD}/${1}_extracted"
DTS_DIR="${OUT_DIR}/dts"
KDIR="${OUT_DIR}/kernel"

# Extract a section of a binary given an IF, OF, offset in hex, length in hex
extract_section() {
	INFILE=$1
	OUTFILE="${OUT_DIR}/${2}"
	OFFSET=$3
	LENGTH=$4
	BS=1024

	if (( $(($OFFSET)) % $BS == 0 )); then
		SKIP=$((${OFFSET}/${BS}))
	else
		SKIP=0
	fi

	echo "Skipping to $((${OFFSET}))"

	dd if=$INFILE of=$OUTFILE bs=$BS skip=$SKIP count=$(($LENGTH/$BS))
}

# Extract all binaries from the given SPI ROM dump
# TODO: take flashrom layout files as input
extract_all() {
	extract_section $1 bct.bin 0x0 0x80000
	extract_section $1 mb1.bin 0x80000 0x40000
	extract_section $1 mb1-bct.bin 0x100000 0x40000
	extract_section $1 fuse-bypass.bin 0x180000 0x40000
	extract_section $1 mb2.bin 0x1c0000 0x40000
	extract_section $1 mts-preboot.bin 0x240000 0x40000
	extract_section $1 mts-bootpack.bin 0x2c0000 0x280000
	extract_section $1 pt.bin 0x7c0000 0x80000
	extract_section $1 bpmp-fw.bin 0x840000 0xc0000
	extract_section $1 bpmp-fw-dtb.bin 0x9c0000 0x40000
	extract_section $1 sce-fw.bin 0xa40000 0x40000
	extract_section $1 adsp-fw.bin 0xac0000 0x200000
	extract_section $1 cpu-bootloader.bin 0xec0000 0x40000
	extract_section $1 secure-os.bin 0xf40000 0x200000
	extract_section $1 eks.bin 0x1340000 0x40000
	extract_section $1 ENV.bin 0x13c0000 0x80000
	extract_section $1 recovery-linux-dtb.bin 0x1440000 0x40000
	extract_section $1 kernel-a-dtb.bin 0x1480000 0x40000
	extract_section $1 kernel-b-dtb.bin 0x14c0000 0x40000
	extract_section $1 recovery-linux.bin 0x1500000 0xb00000
	extract_section $1 kernel-a.bin 0x2000000 0xc00000
	extract_section $1 kernel-a-initramfs.bin 0x2c00000 0x300000
	extract_section $1 kernel-b.bin 0x2f00000 0xc00000
	extract_section $1 kernel-b-initramfs.bin 0x3b00000 0x300000
}

# Remove file extension
remove_ext() {
	cut -f 1 -d '.' $1
}

# Strip BCH from a binary
# Nvidia uses two different sizes for firmware and kernel binaries
strip_bch() {
	case $3 in
		fw)
			dd if=$1 of=$2 bs=16 skip=$(($BCH_SIZE_FW/16))
			;;
		lnx)
			dd if=$1 of=$2 bs=16 skip=$(($BCH_SIZE_LNX/16))
			;;
	esac
}

# Strip both the BOOT_IMAGE! header and BCH from a binary
strip_bootimg_and_bch() {
	dd if=$1 of=$2 bs=32 skip=$((($BOOTIMG_HDR_SIZE+$BCH_SIZE)/32))
}

# Strip the BCH from a DTB partition then
# decompile the resulting DTB to a DTS
dtb_bin_to_dts() {
	DTB=$(echo $1 | remove_ext).dtb
	DTS=$(echo $1 | remove_ext).dts
	echo "Decompiling ${1}"
	strip_bch $OUT_DIR/$1 $DTS_DIR/$DTB $2
	dtc -I dtb -O dts -o $DTS_DIR/$DTS $DTS_DIR/$DTB
}

# Strip the BOOT_IMAGE! and BCH from a kernel partition then
# decompress it
kernel_bin_to_image() {
	KLZF=$(echo $1 | remove_ext).lzf
	KIMG=$(echo $1 | remove_ext)
	echo "Uncompressing ${1}"
	strip_bootimg_and_bch $OUT_DIR/$1 $KDIR/$KLZF
	python3 $PWD/lzf_decompress.py $KDIR/$KLZF $KDIR/$KIMG
}

# Create the directory structure if it doesn't exist
if [ ! -d $OUT_DIR ]; then
        mkdir $OUT_DIR
fi
if [ ! -d $DTS_DIR ]; then
        mkdir $DTS_DIR
fi
if [ ! -d $KDIR ]; then
	mkdir $KDIR
fi

# Extract all partitions and DTS from ROM dump
echo "extracting images from ${1}..."

if [[ $# -ne 0 ]]; then
	if [[ $(wc -c $1 | awk '{print $1}') == $FLASH_SIZE ]]; then
		extract_all $1

		echo "decompiling device trees..."

		dtb_bin_to_dts bpmp-fw-dtb.bin fw
		dtb_bin_to_dts recovery-linux-dtb.bin lnx
		dtb_bin_to_dts kernel-a-dtb.bin lnx
		dtb_bin_to_dts kernel-b-dtb.bin lnx
		
		if [[ $(pip3 list | grep lzf | awk '{print $1}') == "python-lzf" ]]; then
			echo "extracting kernel images..."
			
			kernel_bin_to_image recovery-linux.bin
			kernel_bin_to_image kernel-a.bin
			kernel_bin_to_image kernel-b.bin
		else
			read -p "lzf is not installed. Do you want to install it? [y/n]" response
			
			case $response in
				y) pip3 install lzf;
				   
				*) echo "Exiting... Install lzf by running pip3 install lzf, then rerun this script";
				   exit 1;;
			esac
		fi
	else
		echo "error: file size of dump must be ${FLASH_SIZE}"
	fi

	echo "done"
else
	echo "usage: ${0} [ROM dump file]"
fi
